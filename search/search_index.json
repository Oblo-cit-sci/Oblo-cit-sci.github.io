{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Oblo documentation This is the documentation for the Oblo platform. Oblo is a participatory data collection framework for the web and mobile for geo-localized data like in typical citizen science application. It's focus is on language flexibility and social science type surveys. Features Domains: Project like areas for groups of surveys of one topic or community Generic surveys (templates): Questionaires with diverse types of question types (text, number, selects, locations, images, ...) Translation functionality for individual domains and surveys: Domains and surveys can be translated individually. This allows to collect data of one survey in multiple languages and at the same time allowing language independent data analysis. Translation can be made on Oblo itself. Flexible privacy and licenses per entry: User can define the privacy level and license (creative-commons) for each entry they make. Global roles: Editors and admins can administer data on respective domains/languages (e.g. reviewing entries, that are labeled to require review. or require review because of incomplete data) Domain Initialization Read the backend README to get started The frontend The frontend (oblo-frontend) is statically generated web-application (XXX-URL) which also served by the backend. Thus the generated folder should also be in the application folder domains: fundamental is the initialization of the domains and their entries. All folders in the folder Settings.INIT_DOMAINS_FOLDER will be considered, except those starting with an _ . The domain no_domain . Languages Oblo can work in any languages supported by utf-8 (currently the frontend has only been designed for LTR languages). The i18n messages of the frontend and the backend are stored in sqlite database, which is generated during the first startup. Initially the messages are read from 2 csv files, which should be in init_data/languages and respectively called fe.csv and be.csv. As a source of language names of all language contained languages currently are: English, spanish and catalan. Controller Controller","title":"Home"},{"location":"#oblo-documentation","text":"This is the documentation for the Oblo platform. Oblo is a participatory data collection framework for the web and mobile for geo-localized data like in typical citizen science application. It's focus is on language flexibility and social science type surveys.","title":"Oblo documentation"},{"location":"#features","text":"Domains: Project like areas for groups of surveys of one topic or community Generic surveys (templates): Questionaires with diverse types of question types (text, number, selects, locations, images, ...) Translation functionality for individual domains and surveys: Domains and surveys can be translated individually. This allows to collect data of one survey in multiple languages and at the same time allowing language independent data analysis. Translation can be made on Oblo itself. Flexible privacy and licenses per entry: User can define the privacy level and license (creative-commons) for each entry they make. Global roles: Editors and admins can administer data on respective domains/languages (e.g. reviewing entries, that are labeled to require review. or require review because of incomplete data)","title":"Features"},{"location":"#domain","text":"","title":"Domain"},{"location":"#initialization","text":"Read the backend README to get started","title":"Initialization"},{"location":"#the-frontend","text":"The frontend (oblo-frontend) is statically generated web-application (XXX-URL) which also served by the backend. Thus the generated folder should also be in the application folder domains: fundamental is the initialization of the domains and their entries. All folders in the folder Settings.INIT_DOMAINS_FOLDER will be considered, except those starting with an _ . The domain no_domain .","title":"The frontend"},{"location":"#languages","text":"Oblo can work in any languages supported by utf-8 (currently the frontend has only been designed for LTR languages). The i18n messages of the frontend and the backend are stored in sqlite database, which is generated during the first startup. Initially the messages are read from 2 csv files, which should be in init_data/languages and respectively called fe.csv and be.csv. As a source of language names of all language contained languages currently are: English, spanish and catalan.","title":"Languages"},{"location":"#controller","text":"Controller","title":"Controller"},{"location":"integrated/Aspects/","text":"How to add new Aspects Frontend lib/aspect.js add default value to function aspectTypeDefault add the Aspect Vue component to get_aspect_vue_component lib/consts.js add constant for aspect type Text Is a textarea if max is not present or more than 100 characters can have a placeholder can have clear icon appended (during editing) if its in a list (-> List) dev: there can rules, which are also in the extra (object. thisnis general (AspectComponentMixin)) Number can have a min and max can have a suffix Select MultiSelect TreeSelect TreeMultiSelect Location Image Video Date Month List Composite Options Geometry ExternalAccount EntryRoles","title":"Aspects"},{"location":"integrated/Aspects/#how-to-add-new-aspects","text":"","title":"How to add new Aspects"},{"location":"integrated/Aspects/#frontend","text":"lib/aspect.js add default value to function aspectTypeDefault add the Aspect Vue component to get_aspect_vue_component lib/consts.js add constant for aspect type","title":"Frontend"},{"location":"integrated/Aspects/#text","text":"Is a textarea if max is not present or more than 100 characters can have a placeholder can have clear icon appended (during editing) if its in a list (-> List) dev: there can rules, which are also in the extra (object. thisnis general (AspectComponentMixin))","title":"Text"},{"location":"integrated/Aspects/#number","text":"can have a min and max can have a suffix","title":"Number"},{"location":"integrated/Aspects/#select","text":"","title":"Select"},{"location":"integrated/Aspects/#multiselect","text":"","title":"MultiSelect"},{"location":"integrated/Aspects/#treeselect","text":"","title":"TreeSelect"},{"location":"integrated/Aspects/#treemultiselect","text":"","title":"TreeMultiSelect"},{"location":"integrated/Aspects/#location","text":"","title":"Location"},{"location":"integrated/Aspects/#image","text":"","title":"Image"},{"location":"integrated/Aspects/#video","text":"","title":"Video"},{"location":"integrated/Aspects/#date","text":"","title":"Date"},{"location":"integrated/Aspects/#month","text":"","title":"Month"},{"location":"integrated/Aspects/#list","text":"","title":"List"},{"location":"integrated/Aspects/#composite","text":"","title":"Composite"},{"location":"integrated/Aspects/#options","text":"","title":"Options"},{"location":"integrated/Aspects/#geometry","text":"","title":"Geometry"},{"location":"integrated/Aspects/#externalaccount","text":"","title":"ExternalAccount"},{"location":"integrated/Aspects/#entryroles","text":"","title":"EntryRoles"},{"location":"integrated/Entry-integrations/","text":"Entry integration entry integrations are parts that are included into entries by the template or the domain the entry belongs to or the NO_DOMAIN domain (platform domain). It can also include rules e.g. what the status of new entry should be. (for process_entry_post) requires_review merge the dicts from NO_DOMAIN, entry.domain and entry.template.rules.requires_review in that order (so template rules override domain rules). If any condition is met the entry is marked as requires_review. e.g. visitors entries are not reviewed by default. domain: entry: create: required_review a dict of rules. e.g. : { \"actor.role\": [\"visitor\"] } after_create:","title":"Entry integration"},{"location":"integrated/Entry-integrations/#entry-integration","text":"entry integrations are parts that are included into entries by the template or the domain the entry belongs to or the NO_DOMAIN domain (platform domain). It can also include rules e.g. what the status of new entry should be. (for process_entry_post)","title":"Entry integration"},{"location":"integrated/Entry-integrations/#requires_review","text":"merge the dicts from NO_DOMAIN, entry.domain and entry.template.rules.requires_review in that order (so template rules override domain rules). If any condition is met the entry is marked as requires_review. e.g. visitors entries are not reviewed by default. domain: entry: create: required_review a dict of rules. e.g. : { \"actor.role\": [\"visitor\"] } after_create:","title":"requires_review"},{"location":"pages/backend_readme/","text":"Oblo backend Read the full docs at https://oblo-cit-sci.github.io/ Requirements python 3.9+ postgresql 10+ In order to show the map on the frontend, an account at mapbox is also required. Setup $ cd app $ python3 -m venv venv $ source venv/bin/activate $ pip install -r requirements.txt copy the template envirnment file modify the new config file to your needs: $ cp configs/.env configs/.dev.env alternatively it could be .prod.env or .test.env All variables which are not commented out need to be defined. Those include variables regarding the database, email of the admin, mapbox data and the session secret. You can read All other variables are optional are described here in the docs Getting the Frontend application the frontend is a static web application. If not built and run locally the latest version can be downloaded by: $ wget https://opentek.eu/fe_releases/latest.zip It should be in the app folder and named fe (or different depending on the environmental variable APP_DIR ) Unzip and delete the zip file. $ unzip latest.zip $ rm latest.zip The server can now be started with $ source venv/bin/activate $ export ENV=dev $ uvicorn main:app --port=8100 See the uvicorn settings for more configurations. or use ENV=prod to run in production mode. (or ENV=test to run in test mode). The frontend repo can be found here Domains & Template entries In order to create surveys for data collection you need to define at least one other domain and a template (survey) entry. A domain can be thought of as a project which includes all related surveys for a topic. In the case when you have only one domain, the platform will go right to the domain page when entering the page. In the other case, the main page will show all domains and the user can choose which one to enter. Domains and templates can currently not be created through the frontend but need to be stored in the domains folder within the init_data folder (note that domains folder name can be configured through an environmental variable: INIT_DOMAINS_SUBPATH ). If you want to jump right in with a demo domain you can use the domain in the following repo: https://github.com/Oblo-cit-sci/demo-domain-licci","title":"Oblo backend"},{"location":"pages/backend_readme/#oblo-backend","text":"Read the full docs at https://oblo-cit-sci.github.io/","title":"Oblo backend"},{"location":"pages/backend_readme/#requirements","text":"python 3.9+ postgresql 10+ In order to show the map on the frontend, an account at mapbox is also required.","title":"Requirements"},{"location":"pages/backend_readme/#setup","text":"$ cd app $ python3 -m venv venv $ source venv/bin/activate $ pip install -r requirements.txt copy the template envirnment file modify the new config file to your needs: $ cp configs/.env configs/.dev.env alternatively it could be .prod.env or .test.env All variables which are not commented out need to be defined. Those include variables regarding the database, email of the admin, mapbox data and the session secret. You can read All other variables are optional are described here in the docs","title":"Setup"},{"location":"pages/backend_readme/#getting-the-frontend-application","text":"the frontend is a static web application. If not built and run locally the latest version can be downloaded by: $ wget https://opentek.eu/fe_releases/latest.zip It should be in the app folder and named fe (or different depending on the environmental variable APP_DIR ) Unzip and delete the zip file. $ unzip latest.zip $ rm latest.zip The server can now be started with $ source venv/bin/activate $ export ENV=dev $ uvicorn main:app --port=8100 See the uvicorn settings for more configurations. or use ENV=prod to run in production mode. (or ENV=test to run in test mode). The frontend repo can be found here","title":"Getting the Frontend application"},{"location":"pages/backend_readme/#domains-template-entries","text":"In order to create surveys for data collection you need to define at least one other domain and a template (survey) entry. A domain can be thought of as a project which includes all related surveys for a topic. In the case when you have only one domain, the platform will go right to the domain page when entering the page. In the other case, the main page will show all domains and the user can choose which one to enter. Domains and templates can currently not be created through the frontend but need to be stored in the domains folder within the init_data folder (note that domains folder name can be configured through an environmental variable: INIT_DOMAINS_SUBPATH ). If you want to jump right in with a demo domain you can use the domain in the following repo: https://github.com/Oblo-cit-sci/demo-domain-licci","title":"Domains &amp; Template entries"},{"location":"pages/setup/","text":"Setup and initialization Environment variables ## ALL COMMENTED OUT VALUES CONTAIN THE DEFAULT VALUE ## ALL OTHER VALUES MUST BE SET # HOST=http://0.0.0.0 # PORT=8100 POSTGRES_HOST= # (REQUIRED) Host address of the postgres database POSTGRES_USER= # (REQUIRED) Username for the postgres database POSTGRES_PASSWORD= # (REQUIRED) Password of the postgres database POSTGRES_DB (REQUIRED)= # Name of the postgres database FIRST_ADMIN_EMAIL= # (REQUIRED) Email of the first admin user FIRST_ADMIN_PASSWORD= # (REQUIRED) Password of the first admin user # EMAIL_ENABLED=False #(False or True) Set if emails should be sent (default: False) # EMAIL_SENDER= # (REQUIRED, when EMAIL_ENABLED): Name of the sender, including the server. # EMAIL_ACCOUNT= # (REQUIRED, when EMAIL_ENABLED): Email address of the sender # EMAIL_PWD= # (REQUIRED, when EMAIL_ENABLED): Password of the email account # EMAIL_SSL_SERVER= # (REQUIRED, when EMAIL_ENABLED): smtp-server of email account SESSION_SECRET= # (REQUIRED): A generic secret to be used for session encryption MAP_DEFAULT_MAP_STYLE= # (REQUIRED): The Oblo frontend uses mapbox-gl to render maps. This is the default style to use. More info: mapbox.com/ MAP_ACCESS_TOKEN= # (REQUIRED): Mapbox access token # ADDITIONAL_MAP_STYLES= #Additional map styles (experimental) # PLATFORM_TITLE= The title of the platform. Visible on the appbar, when no-domain (default: Oblo) # BASE_ROUTER_PREFIX= # Api endpoint base router prefix (default: /api) # APP_DIR=fe # The directory where the frontend-app is located, relatively to the the app path (default: fe) # APP_ROUTE=/ # application path the frontend app is hooked to (default: \"/\") # BASE_DATA_FOLDER=data # Base data folder, where application files (not static files) are stored # INIT_DOMAINS_SUBPATH=domains # Subpath to the folder where the initial domains are stored, within BASE_DATA_FOLDER/init_files/ # LANGUAGE_SQLITE_FILE_PATH=messages.sqlite # path of the messages.sqlite database # DEFAULT_LANGUAGE=en # configured application default language # INIT_DOMAINS=True # Configuration, if domains should be re-initialized during startup # INIT_TEMPLATES_CODES=True # Configuration, if templates and code entries should be re-initialized during startup # INIT_LANGUAGE_TABLES=True # Configuration, if language tables should be re-initialized during startup # REPLACE_MESSAGES=False # Configuration, if messages during re-initilization should be overwritten by text in csv files # DEACTIVATE_LANGUAGES=[] # Languages that should be deactivated # LOGIN_REQUIRED=False # Configuration, if login is required for all routes (experimental) # EMAIL_VERIFICATION_REQUIRED=True # Configuration, if email verification is required after registration # DEFAULT_USER_GUIDE_URL= # URL to the user guides # TIMING_MIDDLEWARE_ACTIVE=False # Configuration, if timing middleware should be active # DATA_MIGRATION=False # Configuration, if data migration should be performed after setup # RUN_APP_TESTS=False # Configuration, if app tests should be run after setup # LANGUAGE_LIST_SOURCE_REPO_URL=https://github.com/umpirsky/language-list # Repo from which language names are taken (downloaded at the first startup) # MIGRATION_HELP_ACTIVE=False # change some config helping and adaptations to the init code for migration # Settings for development # DEFAULT_LANGUAGE_FE_MESSAGES_FILE= # A i18n source file that is generally stored in the frontend development repo (works only in dev mode) # RESET_TEST_DB=False # completly clear the db at startup. Only works in test env","title":"Setup and initialization"},{"location":"pages/setup/#setup-and-initialization","text":"","title":"Setup and initialization"},{"location":"pages/setup/#environment-variables","text":"## ALL COMMENTED OUT VALUES CONTAIN THE DEFAULT VALUE ## ALL OTHER VALUES MUST BE SET # HOST=http://0.0.0.0 # PORT=8100 POSTGRES_HOST= # (REQUIRED) Host address of the postgres database POSTGRES_USER= # (REQUIRED) Username for the postgres database POSTGRES_PASSWORD= # (REQUIRED) Password of the postgres database POSTGRES_DB (REQUIRED)= # Name of the postgres database FIRST_ADMIN_EMAIL= # (REQUIRED) Email of the first admin user FIRST_ADMIN_PASSWORD= # (REQUIRED) Password of the first admin user # EMAIL_ENABLED=False #(False or True) Set if emails should be sent (default: False) # EMAIL_SENDER= # (REQUIRED, when EMAIL_ENABLED): Name of the sender, including the server. # EMAIL_ACCOUNT= # (REQUIRED, when EMAIL_ENABLED): Email address of the sender # EMAIL_PWD= # (REQUIRED, when EMAIL_ENABLED): Password of the email account # EMAIL_SSL_SERVER= # (REQUIRED, when EMAIL_ENABLED): smtp-server of email account SESSION_SECRET= # (REQUIRED): A generic secret to be used for session encryption MAP_DEFAULT_MAP_STYLE= # (REQUIRED): The Oblo frontend uses mapbox-gl to render maps. This is the default style to use. More info: mapbox.com/ MAP_ACCESS_TOKEN= # (REQUIRED): Mapbox access token # ADDITIONAL_MAP_STYLES= #Additional map styles (experimental) # PLATFORM_TITLE= The title of the platform. Visible on the appbar, when no-domain (default: Oblo) # BASE_ROUTER_PREFIX= # Api endpoint base router prefix (default: /api) # APP_DIR=fe # The directory where the frontend-app is located, relatively to the the app path (default: fe) # APP_ROUTE=/ # application path the frontend app is hooked to (default: \"/\") # BASE_DATA_FOLDER=data # Base data folder, where application files (not static files) are stored # INIT_DOMAINS_SUBPATH=domains # Subpath to the folder where the initial domains are stored, within BASE_DATA_FOLDER/init_files/ # LANGUAGE_SQLITE_FILE_PATH=messages.sqlite # path of the messages.sqlite database # DEFAULT_LANGUAGE=en # configured application default language # INIT_DOMAINS=True # Configuration, if domains should be re-initialized during startup # INIT_TEMPLATES_CODES=True # Configuration, if templates and code entries should be re-initialized during startup # INIT_LANGUAGE_TABLES=True # Configuration, if language tables should be re-initialized during startup # REPLACE_MESSAGES=False # Configuration, if messages during re-initilization should be overwritten by text in csv files # DEACTIVATE_LANGUAGES=[] # Languages that should be deactivated # LOGIN_REQUIRED=False # Configuration, if login is required for all routes (experimental) # EMAIL_VERIFICATION_REQUIRED=True # Configuration, if email verification is required after registration # DEFAULT_USER_GUIDE_URL= # URL to the user guides # TIMING_MIDDLEWARE_ACTIVE=False # Configuration, if timing middleware should be active # DATA_MIGRATION=False # Configuration, if data migration should be performed after setup # RUN_APP_TESTS=False # Configuration, if app tests should be run after setup # LANGUAGE_LIST_SOURCE_REPO_URL=https://github.com/umpirsky/language-list # Repo from which language names are taken (downloaded at the first startup) # MIGRATION_HELP_ACTIVE=False # change some config helping and adaptations to the init code for migration # Settings for development # DEFAULT_LANGUAGE_FE_MESSAGES_FILE= # A i18n source file that is generally stored in the frontend development repo (works only in dev mode) # RESET_TEST_DB=False # completly clear the db at startup. Only works in test env","title":"Environment variables"},{"location":"pages/concepts/aspects/","text":"Aspects Types of aspects: String type value: \"str\" Attributes: min: Minimum required characters (default: 0) max: Minimum allowed characters (default: unlimited) extra.hint: Hint shown for the String field placeholder: Placeholder text for the String field component_type: 'text' | 'password' (default: 'text') Integer/Float type value: \"int\" | \"float\" min: Minimum value (default: 0) max: Maximum value (default: unlimited) suffix: Suffix for the Integer/Float field (both values can also include the string '%current_year' to use the current year) Date type value: \"date\" Month type value: \"month\" Attribues: until_now: If true, the current month is the maximum (default: true) Image Location Video Select MultiSelect TreeSelect TreeMultiSelect Composite List Geometry EntryRoles ExternalAccount Options","title":"Aspects"},{"location":"pages/concepts/aspects/#aspects","text":"Types of aspects:","title":"Aspects"},{"location":"pages/concepts/aspects/#string","text":"type value: \"str\" Attributes: min: Minimum required characters (default: 0) max: Minimum allowed characters (default: unlimited) extra.hint: Hint shown for the String field placeholder: Placeholder text for the String field component_type: 'text' | 'password' (default: 'text')","title":"String"},{"location":"pages/concepts/aspects/#integerfloat","text":"type value: \"int\" | \"float\" min: Minimum value (default: 0) max: Maximum value (default: unlimited) suffix: Suffix for the Integer/Float field (both values can also include the string '%current_year' to use the current year)","title":"Integer/Float"},{"location":"pages/concepts/aspects/#date","text":"type value: \"date\"","title":"Date"},{"location":"pages/concepts/aspects/#month","text":"type value: \"month\" Attribues: until_now: If true, the current month is the maximum (default: true)","title":"Month"},{"location":"pages/concepts/aspects/#image","text":"","title":"Image"},{"location":"pages/concepts/aspects/#location","text":"","title":"Location"},{"location":"pages/concepts/aspects/#video","text":"","title":"Video"},{"location":"pages/concepts/aspects/#select","text":"","title":"Select"},{"location":"pages/concepts/aspects/#multiselect","text":"","title":"MultiSelect"},{"location":"pages/concepts/aspects/#treeselect","text":"","title":"TreeSelect"},{"location":"pages/concepts/aspects/#treemultiselect","text":"","title":"TreeMultiSelect"},{"location":"pages/concepts/aspects/#composite","text":"","title":"Composite"},{"location":"pages/concepts/aspects/#list","text":"","title":"List"},{"location":"pages/concepts/aspects/#geometry","text":"","title":"Geometry"},{"location":"pages/concepts/aspects/#entryroles","text":"","title":"EntryRoles"},{"location":"pages/concepts/aspects/#externalaccount","text":"","title":"ExternalAccount"},{"location":"pages/concepts/aspects/#options","text":"","title":"Options"},{"location":"pages/concepts/domain/","text":"Domain Domains are stored in the two different tables: domain_meta and domain. domain_meta hold the following fields: name: a unique name (str) content: the language unspecific data of the domain (json) index: the index in the list, when they are returned sorted (int) is_active: if the domain should be returned during normal requests (bool) default_language: the default language of the domain, code/template entries should be of this language first (str) domain has the following fields: A domain Object contains the full domain data in specific languages. Domain objects are unique for the tuple of the domain_meta (a ForeignKey to a domain_meta object) and their language. title: the title of the domain in the given language (str) language: the language of this domain object (and its content) (str) content: the full data of the domain (str) is_active: if the domain data is available in this language (bool)","title":"Domains"},{"location":"pages/concepts/domain/#domain","text":"Domains are stored in the two different tables: domain_meta and domain. domain_meta hold the following fields: name: a unique name (str) content: the language unspecific data of the domain (json) index: the index in the list, when they are returned sorted (int) is_active: if the domain should be returned during normal requests (bool) default_language: the default language of the domain, code/template entries should be of this language first (str) domain has the following fields: A domain Object contains the full domain data in specific languages. Domain objects are unique for the tuple of the domain_meta (a ForeignKey to a domain_meta object) and their language. title: the title of the domain in the given language (str) language: the language of this domain object (and its content) (str) content: the full data of the domain (str) is_active: if the domain data is available in this language (bool)","title":"Domain"},{"location":"pages/concepts/template_code_entries/","text":"Templates and Codes Concrete entries: Concrete entries, which have base-template and base-codes as templates can be up-to-date, meaning the template_version is the same as the current version of the base-entry. In case it is not, there are 2 levels, it can be outdated: - constrained outdated: Some attributes have been changed - structurally outdated: aspects have been changed For Concrete","title":"Templates and Codes"},{"location":"pages/concepts/template_code_entries/#templates-and-codes","text":"","title":"Templates and Codes"},{"location":"pages/concepts/template_code_entries/#concrete-entries","text":"Concrete entries, which have base-template and base-codes as templates can be up-to-date, meaning the template_version is the same as the current version of the base-entry. In case it is not, there are 2 levels, it can be outdated: - constrained outdated: Some attributes have been changed - structurally outdated: aspects have been changed For Concrete","title":"Concrete entries:"},{"location":"pages/structure/","text":"Basic project Structure app includes the main source code configs includes the environmental variables, oauth-server configs and the logger configuration data holds the data for initialization generally used by the application static static files that are served by the server logs log outputs","title":"Basic structure"},{"location":"pages/structure/#basic-project-structure","text":"app includes the main source code configs includes the environmental variables, oauth-server configs and the logger configuration data holds the data for initialization generally used by the application static static files that are served by the server logs log outputs","title":"Basic project Structure"},{"location":"pages/structure/controller/","text":"Controller the python modules in the controller package include all the endpoints. They are all included in the controller.__init__.py . There are following controller: Basic This controller delivers the initialization data and the domain basics (depending on language and start page) Actor All actor related routes Domain All domain related routes Entry All entry related routes Entries All routes, that deal with multiple entries (e.g. search, download) Entry_files All routes that deal with entry-attachments Config Some admin and migration endpoints Language Language and Message related enpoints OAuth Plugin sse_connection Util Test","title":"Controller"},{"location":"pages/structure/controller/#controller","text":"the python modules in the controller package include all the endpoints. They are all included in the controller.__init__.py . There are following controller:","title":"Controller"},{"location":"pages/structure/controller/#basic","text":"This controller delivers the initialization data and the domain basics (depending on language and start page)","title":"Basic"},{"location":"pages/structure/controller/#actor","text":"All actor related routes","title":"Actor"},{"location":"pages/structure/controller/#domain","text":"All domain related routes","title":"Domain"},{"location":"pages/structure/controller/#entry","text":"All entry related routes","title":"Entry"},{"location":"pages/structure/controller/#entries","text":"All routes, that deal with multiple entries (e.g. search, download)","title":"Entries"},{"location":"pages/structure/controller/#entry_files","text":"All routes that deal with entry-attachments","title":"Entry_files"},{"location":"pages/structure/controller/#config","text":"Some admin and migration endpoints","title":"Config"},{"location":"pages/structure/controller/#language","text":"Language and Message related enpoints","title":"Language"},{"location":"pages/structure/controller/#oauth","text":"","title":"OAuth"},{"location":"pages/structure/controller/#plugin","text":"","title":"Plugin"},{"location":"pages/structure/controller/#sse_connection","text":"","title":"sse_connection"},{"location":"pages/structure/controller/#util","text":"","title":"Util"},{"location":"pages/structure/controller/#test","text":"","title":"Test"}]}