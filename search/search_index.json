{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Oblo documentation This is the documentation for the Oblo platform. Oblo is a participatory data collection framework for the web and mobile for geo-localized data like in typical citizen science application. It's focus is on language flexibility and social science type surveys. Features Domains: Project like areas for groups of surveys of one topic or community Generic surveys (templates): Questionaires with diverse types of question types (text, number, selects, locations, images, ...) Translation functionality for individual domains and surveys: Domains and surveys can be translated individually. This allows to collect data of one survey in multiple languages and at the same time allowing language independent data analysis. Translation can be made on Oblo itself. Flexible privacy and licenses per entry: User can define the privacy level and license (creative-commons) for each entry they make. Global roles: Editors and admins can administer data on respective domains/languages (e.g. reviewing entries, that are labeled to require review. or require review because of incomplete data) Login with SciStarter, INaturalist or ORCiD (or other OAuth providers) Easily extensible with domain plugins Entry tags, allow better filtering of entries based on their data Initialization Read the backend README to get started The Frontend The frontend (oblo-frontend) is statically generated web-application ( see the repo here ) which also served by the backend. Thus the generated folder should also be in the application folder Languages Oblo can work in any languages supported by utf-8 (currently the frontend has only been designed for LTR languages). The i18n messages of the frontend and the backend are stored in sqlite database, which is generated during the first startup. Initially the messages are read from 2 csv files, which should be in init_data/languages and respectively called fe.csv and be.csv. As a source of language names of all language contained languages currently are: English, spanish and catalan. Domains and template-entries Domains, template and code-entries provide the fundamental structure of the platform and its surveys. Domains can be thought of as project, which contain surveys of specific topic or community. Read more details on domains here. Repository structure A general structure of the repository: Controller","title":"Home"},{"location":"#oblo-documentation","text":"This is the documentation for the Oblo platform. Oblo is a participatory data collection framework for the web and mobile for geo-localized data like in typical citizen science application. It's focus is on language flexibility and social science type surveys.","title":"Oblo documentation"},{"location":"#features","text":"Domains: Project like areas for groups of surveys of one topic or community Generic surveys (templates): Questionaires with diverse types of question types (text, number, selects, locations, images, ...) Translation functionality for individual domains and surveys: Domains and surveys can be translated individually. This allows to collect data of one survey in multiple languages and at the same time allowing language independent data analysis. Translation can be made on Oblo itself. Flexible privacy and licenses per entry: User can define the privacy level and license (creative-commons) for each entry they make. Global roles: Editors and admins can administer data on respective domains/languages (e.g. reviewing entries, that are labeled to require review. or require review because of incomplete data) Login with SciStarter, INaturalist or ORCiD (or other OAuth providers) Easily extensible with domain plugins Entry tags, allow better filtering of entries based on their data","title":"Features"},{"location":"#initialization","text":"Read the backend README to get started","title":"Initialization"},{"location":"#the-frontend","text":"The frontend (oblo-frontend) is statically generated web-application ( see the repo here ) which also served by the backend. Thus the generated folder should also be in the application folder","title":"The Frontend"},{"location":"#languages","text":"Oblo can work in any languages supported by utf-8 (currently the frontend has only been designed for LTR languages). The i18n messages of the frontend and the backend are stored in sqlite database, which is generated during the first startup. Initially the messages are read from 2 csv files, which should be in init_data/languages and respectively called fe.csv and be.csv. As a source of language names of all language contained languages currently are: English, spanish and catalan.","title":"Languages"},{"location":"#domains-and-template-entries","text":"Domains, template and code-entries provide the fundamental structure of the platform and its surveys. Domains can be thought of as project, which contain surveys of specific topic or community. Read more details on domains here.","title":"Domains and template-entries"},{"location":"#repository-structure","text":"A general structure of the repository: Controller","title":"Repository structure"},{"location":"pages/setup/","text":"Oblo backend Read the full docs at https://oblo-cit-sci.github.io/ Requirements python 3.9+ postgresql 10+ In order to show the map on the frontend, an account at mapbox is also required. Setup $ cd app $ python3 -m venv venv $ source venv/bin/activate $ pip install -r requirements.txt copy the template envirnment file modify the new config file to your needs: $ cp configs/.env configs/.dev.env alternatively it could be .prod.env or .test.env All variables which are not commented out need to be defined. Those include variables regarding the database, email of the admin, mapbox data and the session secret. You can read All other variables are optional are described here in the docs Getting the Frontend application the frontend is a static web application. If not built and run locally the latest version can be downloaded by: $ wget https://opentek.eu/fe_releases/latest.zip It should be in the app folder and named fe (or different depending on the environmental variable APP_DIR ) Unzip and delete the zip file. $ unzip latest.zip $ rm latest.zip The server can now be started with $ source venv/bin/activate $ export ENV=dev $ uvicorn main:app --port=8100 See the uvicorn settings for more configurations. or use ENV=prod to run in production mode. (or ENV=test to run in test mode). The frontend repo can be found here Domains & Template entries In order to create surveys for data collection you need to define at least one other domain and a template (survey) entry. A domain can be thought of as a project which includes all related surveys for a topic. In the case when you have only one domain, the platform will go right to the domain page when entering the page. In the other case, the main page will show all domains and the user can choose which one to enter. Domains and templates can currently not be created through the frontend but need to be stored in the domains folder within the init_data folder (note that domains folder name can be configured through an environmental variable: INIT_DOMAINS_SUBPATH ). If you want to jump right in with a demo domain you can use the domain in the following repo: https://github.com/Oblo-cit-sci/demo-domain-licci","title":"Setup and initialization"},{"location":"pages/setup/#oblo-backend","text":"Read the full docs at https://oblo-cit-sci.github.io/","title":"Oblo backend"},{"location":"pages/setup/#requirements","text":"python 3.9+ postgresql 10+ In order to show the map on the frontend, an account at mapbox is also required.","title":"Requirements"},{"location":"pages/setup/#setup","text":"$ cd app $ python3 -m venv venv $ source venv/bin/activate $ pip install -r requirements.txt copy the template envirnment file modify the new config file to your needs: $ cp configs/.env configs/.dev.env alternatively it could be .prod.env or .test.env All variables which are not commented out need to be defined. Those include variables regarding the database, email of the admin, mapbox data and the session secret. You can read All other variables are optional are described here in the docs","title":"Setup"},{"location":"pages/setup/#getting-the-frontend-application","text":"the frontend is a static web application. If not built and run locally the latest version can be downloaded by: $ wget https://opentek.eu/fe_releases/latest.zip It should be in the app folder and named fe (or different depending on the environmental variable APP_DIR ) Unzip and delete the zip file. $ unzip latest.zip $ rm latest.zip The server can now be started with $ source venv/bin/activate $ export ENV=dev $ uvicorn main:app --port=8100 See the uvicorn settings for more configurations. or use ENV=prod to run in production mode. (or ENV=test to run in test mode). The frontend repo can be found here","title":"Getting the Frontend application"},{"location":"pages/setup/#domains-template-entries","text":"In order to create surveys for data collection you need to define at least one other domain and a template (survey) entry. A domain can be thought of as a project which includes all related surveys for a topic. In the case when you have only one domain, the platform will go right to the domain page when entering the page. In the other case, the main page will show all domains and the user can choose which one to enter. Domains and templates can currently not be created through the frontend but need to be stored in the domains folder within the init_data folder (note that domains folder name can be configured through an environmental variable: INIT_DOMAINS_SUBPATH ). If you want to jump right in with a demo domain you can use the domain in the following repo: https://github.com/Oblo-cit-sci/demo-domain-licci","title":"Domains &amp; Template entries"},{"location":"pages/concepts/aspects/","text":"Aspects Types of aspects: String type value: \"str\" Attributes: min: Minimum required characters (default: 0) max: Minimum allowed characters (default: unlimited) extra.hint: Hint shown for the String field placeholder: Placeholder text for the String field component_type: 'text' | 'password' (default: 'text') Integer/Float type value: \"int\" | \"float\" min: Minimum value (default: 0) max: Maximum value (default: unlimited) suffix: Suffix for the Integer/Float field (both values can also include the string '%current_year' to use the current year) Date type value: \"date\" Month type value: \"month\" Attribues: until_now: If true, the current month is the maximum (default: true) Image Location Video Select MultiSelect TreeSelect TreeMultiSelect Composite List Geometry EntryRoles ExternalAccount Options","title":"Aspects"},{"location":"pages/concepts/aspects/#aspects","text":"Types of aspects:","title":"Aspects"},{"location":"pages/concepts/aspects/#string","text":"type value: \"str\" Attributes: min: Minimum required characters (default: 0) max: Minimum allowed characters (default: unlimited) extra.hint: Hint shown for the String field placeholder: Placeholder text for the String field component_type: 'text' | 'password' (default: 'text')","title":"String"},{"location":"pages/concepts/aspects/#integerfloat","text":"type value: \"int\" | \"float\" min: Minimum value (default: 0) max: Maximum value (default: unlimited) suffix: Suffix for the Integer/Float field (both values can also include the string '%current_year' to use the current year)","title":"Integer/Float"},{"location":"pages/concepts/aspects/#date","text":"type value: \"date\"","title":"Date"},{"location":"pages/concepts/aspects/#month","text":"type value: \"month\" Attribues: until_now: If true, the current month is the maximum (default: true)","title":"Month"},{"location":"pages/concepts/aspects/#image","text":"","title":"Image"},{"location":"pages/concepts/aspects/#location","text":"","title":"Location"},{"location":"pages/concepts/aspects/#video","text":"","title":"Video"},{"location":"pages/concepts/aspects/#select","text":"","title":"Select"},{"location":"pages/concepts/aspects/#multiselect","text":"","title":"MultiSelect"},{"location":"pages/concepts/aspects/#treeselect","text":"","title":"TreeSelect"},{"location":"pages/concepts/aspects/#treemultiselect","text":"","title":"TreeMultiSelect"},{"location":"pages/concepts/aspects/#composite","text":"","title":"Composite"},{"location":"pages/concepts/aspects/#list","text":"","title":"List"},{"location":"pages/concepts/aspects/#geometry","text":"","title":"Geometry"},{"location":"pages/concepts/aspects/#entryroles","text":"","title":"EntryRoles"},{"location":"pages/concepts/aspects/#externalaccount","text":"","title":"ExternalAccount"},{"location":"pages/concepts/aspects/#options","text":"","title":"Options"},{"location":"pages/concepts/domain/","text":"Domain Domains are the most fundamental parts in a data collection system on Oblo. They serve as entry points to a collection project, with its specific surveys, tags and map settings and unique configurations and plugins. Domains can be provided in various languages and each domain can have its own default language. Loading and updating domains Currently, domains cannot be loaded or updated during runtime, but only during application start (given that the environment variable: INIT_DOMAINS is set). The domains are read from the folder <BASE_DATA_FOLDER>/init_data/<INIT_DOMAINS_SUBPATH> , where <BASE_DATA_FOLDER> and <INIT_DOMAINS_SUBPATH> are environment variables by default set to data and domains .Updates to the wording (the translatable part of domain can be done during runtime. See ) This is the folder structure a domain has: [//]: # ( Path: docs/pages/concepts/domain.md Domains are stored in the two different tables: domain_meta and domain. domain_meta hold the following fields: name: a unique name (str) content: the language unspecific data of the domain (json) index: the index in the list, when they are returned sorted (int) is_active: if the domain should be returned during normal requests (bool) default_language: the default language of the domain, code/template entries should be of this language first (str) domain has the following fields: A domain Object contains the full domain data in specific languages. Domain objects are unique for the tuple of the domain_meta (a ForeignKey to a domain_meta object) and their language. title: the title of the domain in the given language (str) language: the language of this domain object (and its content) (str) content: the full data of the domain (str) is_active: if the domain data is available in this language (bool)","title":"Domains"},{"location":"pages/concepts/domain/#domain","text":"Domains are the most fundamental parts in a data collection system on Oblo. They serve as entry points to a collection project, with its specific surveys, tags and map settings and unique configurations and plugins. Domains can be provided in various languages and each domain can have its own default language. Loading and updating domains Currently, domains cannot be loaded or updated during runtime, but only during application start (given that the environment variable: INIT_DOMAINS is set). The domains are read from the folder <BASE_DATA_FOLDER>/init_data/<INIT_DOMAINS_SUBPATH> , where <BASE_DATA_FOLDER> and <INIT_DOMAINS_SUBPATH> are environment variables by default set to data and domains .Updates to the wording (the translatable part of domain can be done during runtime. See ) This is the folder structure a domain has: [//]: # ( Path: docs/pages/concepts/domain.md Domains are stored in the two different tables: domain_meta and domain. domain_meta hold the following fields: name: a unique name (str) content: the language unspecific data of the domain (json) index: the index in the list, when they are returned sorted (int) is_active: if the domain should be returned during normal requests (bool) default_language: the default language of the domain, code/template entries should be of this language first (str) domain has the following fields: A domain Object contains the full domain data in specific languages. Domain objects are unique for the tuple of the domain_meta (a ForeignKey to a domain_meta object) and their language. title: the title of the domain in the given language (str) language: the language of this domain object (and its content) (str) content: the full data of the domain (str) is_active: if the domain data is available in this language (bool)","title":"Domain"},{"location":"pages/concepts/languages/","text":"Languages and translation There are 4 major elements that can translated independently: Frontend messages These contain all the basic texts on application, including menus buttons and other basic ( content independent) texts. Backend messages Frontend messages contain all the messages that the server can respond as a feedback to a user action. Domains These are the different parts of the application, like the different pages, the different components, etc. Entries These are the different texts that are used in the application. Language codes Currently Oblo uses 639-1 language codes for managing languages. Default platform language The default platform language is defined in the environment variable DEFAULT_LANGUAGE . In general when a user visit the page without declaring a language in the query parameter lang (e.g. https://oblo-example.com/?lang=es ) The default language is used. Frontend and backend messages The frontend and backend messages are stored in a sqlite database messages database , which is located at <BASE_DATA_FOLDER>/<LANGUAGE_SQLITE_FILE_PATH> (default: data/messages.sqlite ). When the environment variable INIT_LANGUAGE_TABLES is set to true (or when the messages database does not exist) , the database is initialized with data coming from 2 csv files: <BASE_DATA_FOLDER>/init_data/languages/fe.csv ( and be.csv respectively). When REPLACE_MESSAGES is to true it will overwrite the existing messages in the database, if they differ from those in the csv files. The messages database has 5 tables: fe: frontend messages be: backend messages changes: storing changes in fe and be languages: language code and names (in english!) status: stores general information about the message tables (including if they are active - selectable by the user) Languages table The language table is filled by the file <BASE_DATA_FOLDER>/init_data/languages/languages.csv ( default: data/languages/languages.csv ). Language names in all languages Oblo uses the repository LANGUAGE_LIST_SOURCE_REPO_URL (currently https://github.com/umpirsky/language-list ), which is downloaded when its missing on startup. The repo contains the names of many languages in many languages. Through that, when a new language is added, its name is added to the fe table in all other languages of the platform. Respectively, it adds the names of all platform languages in the new language.","title":"Languages and translation support"},{"location":"pages/concepts/languages/#languages-and-translation","text":"There are 4 major elements that can translated independently: Frontend messages These contain all the basic texts on application, including menus buttons and other basic ( content independent) texts. Backend messages Frontend messages contain all the messages that the server can respond as a feedback to a user action. Domains These are the different parts of the application, like the different pages, the different components, etc. Entries These are the different texts that are used in the application. Language codes Currently Oblo uses 639-1 language codes for managing languages.","title":"Languages and translation"},{"location":"pages/concepts/languages/#default-platform-language","text":"The default platform language is defined in the environment variable DEFAULT_LANGUAGE . In general when a user visit the page without declaring a language in the query parameter lang (e.g. https://oblo-example.com/?lang=es ) The default language is used.","title":"Default platform language"},{"location":"pages/concepts/languages/#frontend-and-backend-messages","text":"The frontend and backend messages are stored in a sqlite database messages database , which is located at <BASE_DATA_FOLDER>/<LANGUAGE_SQLITE_FILE_PATH> (default: data/messages.sqlite ). When the environment variable INIT_LANGUAGE_TABLES is set to true (or when the messages database does not exist) , the database is initialized with data coming from 2 csv files: <BASE_DATA_FOLDER>/init_data/languages/fe.csv ( and be.csv respectively). When REPLACE_MESSAGES is to true it will overwrite the existing messages in the database, if they differ from those in the csv files. The messages database has 5 tables: fe: frontend messages be: backend messages changes: storing changes in fe and be languages: language code and names (in english!) status: stores general information about the message tables (including if they are active - selectable by the user) Languages table The language table is filled by the file <BASE_DATA_FOLDER>/init_data/languages/languages.csv ( default: data/languages/languages.csv ). Language names in all languages Oblo uses the repository LANGUAGE_LIST_SOURCE_REPO_URL (currently https://github.com/umpirsky/language-list ), which is downloaded when its missing on startup. The repo contains the names of many languages in many languages. Through that, when a new language is added, its name is added to the fe table in all other languages of the platform. Respectively, it adds the names of all platform languages in the new language.","title":"Frontend and backend messages"},{"location":"pages/concepts/template_code_entries/","text":"Templates and Codes Concrete entries: Concrete entries, which have base-template and base-codes as templates can be up-to-date, meaning the template_version is the same as the current version of the base-entry. In case it is not, there are 2 levels, it can be outdated: - constrained outdated: Some attributes have been changed - structurally outdated: aspects have been changed For Concrete","title":"Templates/Codes"},{"location":"pages/concepts/template_code_entries/#templates-and-codes","text":"","title":"Templates and Codes"},{"location":"pages/concepts/template_code_entries/#concrete-entries","text":"Concrete entries, which have base-template and base-codes as templates can be up-to-date, meaning the template_version is the same as the current version of the base-entry. In case it is not, there are 2 levels, it can be outdated: - constrained outdated: Some attributes have been changed - structurally outdated: aspects have been changed For Concrete","title":"Concrete entries:"},{"location":"pages/structure/","text":"Basic project Structure app includes the main source code configs includes the environmental variables, oauth-server configs and the logger configuration data holds the data for initialization generally used by the application static static files that are served by the server logs log outputs","title":"Basic structure"},{"location":"pages/structure/#basic-project-structure","text":"app includes the main source code configs includes the environmental variables, oauth-server configs and the logger configuration data holds the data for initialization generally used by the application static static files that are served by the server logs log outputs","title":"Basic project Structure"},{"location":"pages/structure/controller/","text":"Controller the python modules in the controller package include all the endpoints. They are all included in the controller.__init__.py . There are following controller: Basic This controller delivers the initialization data and the domain basics (depending on language and start page) Actor All actor related routes Domain All domain related routes Entry All entry related routes Entries All routes, that deal with multiple entries (e.g. search, download) Entry_files All routes that deal with entry-attachments Config Some admin and migration endpoints Language Language and Message related enpoints OAuth Plugin sse_connection Util Test","title":"Controller"},{"location":"pages/structure/controller/#controller","text":"the python modules in the controller package include all the endpoints. They are all included in the controller.__init__.py . There are following controller:","title":"Controller"},{"location":"pages/structure/controller/#basic","text":"This controller delivers the initialization data and the domain basics (depending on language and start page)","title":"Basic"},{"location":"pages/structure/controller/#actor","text":"All actor related routes","title":"Actor"},{"location":"pages/structure/controller/#domain","text":"All domain related routes","title":"Domain"},{"location":"pages/structure/controller/#entry","text":"All entry related routes","title":"Entry"},{"location":"pages/structure/controller/#entries","text":"All routes, that deal with multiple entries (e.g. search, download)","title":"Entries"},{"location":"pages/structure/controller/#entry_files","text":"All routes that deal with entry-attachments","title":"Entry_files"},{"location":"pages/structure/controller/#config","text":"Some admin and migration endpoints","title":"Config"},{"location":"pages/structure/controller/#language","text":"Language and Message related enpoints","title":"Language"},{"location":"pages/structure/controller/#oauth","text":"","title":"OAuth"},{"location":"pages/structure/controller/#plugin","text":"","title":"Plugin"},{"location":"pages/structure/controller/#sse_connection","text":"","title":"sse_connection"},{"location":"pages/structure/controller/#util","text":"","title":"Util"},{"location":"pages/structure/controller/#test","text":"","title":"Test"},{"location":"schema/Settings/","text":"Settings Base class for settings, allowing values to be overridden by environment variables. This is useful in production for secrets you do not wish to save in code, it plays nicely with docker(-compose), Heroku and any 12 factor app design. Properties ENV (string) : Must be one of: ['dev', 'prod', 'test'] . HOST (string) : Host address(including port) of the frontend app. Default: http://0.0.0.0 . PORT (integer) : Port of the server. Default: 8100 . POSTGRES_HOST (string) : hostname of the postgres (e.g. localhost). POSTGRES_USER (string) : username for postgres. POSTGRES_PASSWORD (string) : password to the postgres database. POSTGRES_DB (string) : name of the database. FIRST_ADMIN_EMAIL (string) : email address of the 1. admin user. FIRST_ADMIN_PASSWORD (string) : Password for the 1. admin user. EMAIL_ENABLED (boolean) : Set if emails should be sent. Default: False . EMAIL_SENDER (string) : (REQUIRED, when EMAIL_ENABLED): Name of the sender, including the server. EMAIL_ACCOUNT (string) : (REQUIRED, when EMAIL_ENABLED): Email address of the sender. EMAIL_PWD (string) : (REQUIRED, when EMAIL_ENABLED): Password of the email account. Default: ``. EMAIL_SSL_SERVER (string) : (REQUIRED, when EMAIL_ENABLED): smtp-server of email account. Default: ``. SESSION_SECRET (string) : A generic secret to be used for session encryption. MAP_DEFAULT_MAP_STYLE (string) : Default mapbox map style to render maps. This is the default style to use. More info: mapbox.com/. MAP_ACCESS_TOKEN (string) : Mapbox access token. ADDITIONAL_MAP_STYLES (array) : Additional map styles (experimental). Default: [] . Items (string) PLATFORM_TITLE (string) : The title of the platform. Visible on the appbar, when no-domain. Default: Oblo . BASE_ROUTER_PREFIX (string) : Api endpoint base router prefix. Default: /api . APP_DIR (string) : The directory where the frontend-app is located, relatively to the app path (default: fe). Default: fe . APP_ROUTE (string) : application path the frontend app is hooked to. Default: / . BASE_DATA_FOLDER (string) : Base data folder, where application files (not static files) are stored. Default: data . INIT_DOMAINS_SUBPATH (string) : Sub-path to the folder where the initial domains are stored, within BASE_DATA_FOLDER/init_files/. Default: domains . LANGUAGE_SQLITE_FILE_PATH (string) : path of the messages.sqlite database. Default: messages.sqlite . DEFAULT_LANGUAGE (string) : configured application default language. Default: en . INIT_DOMAINS (boolean) : Configuration, if domains should be re-initialized during startup. Default: True . INIT_TEMPLATES_CODES (boolean) : Configuration, if templates and code entries should be re-initialized during startup. Default: True . INIT_LANGUAGE_TABLES (boolean) : Configuration, if language tables should be re-initialized during startup. Default: True . REPLACE_MESSAGES (boolean) : Configuration, if messages during re-initialization should be overwritten by text in csv files. Default: False . DEACTIVATE_LANGUAGES (array) : languages that should be deactivated. Default: [] . Items (string) LOGIN_REQUIRED (boolean) : Configuration, if login is required for all routes (experimental). Default: False . EMAIL_VERIFICATION_REQUIRED (boolean) : Configuration, if email verification is required after registration. Default: True . DEFAULT_USER_GUIDE_URL (string) : URL to the user guides. TIMING_MIDDLEWARE_ACTIVE (boolean) : Configuration, if timing middleware should be active. Default: False . DATA_MIGRATION (boolean) : Configuration, if data migration should be performed after setup. Default: False . RUN_APP_TESTS (boolean) : Configuration, if app tests should be run after setup. Default: False . LANGUAGE_LIST_SOURCE_REPO_URL (string) : Repo from which language names are taken (downloaded at the first startup). Default: https://github.com/umpirsky/language-list . CORS_OTHER_ORIGINS (string) : Default: ``. MIGRATION_HELP_ACTIVE (boolean) : change some config helping and adaptations to the init code for migration. Default: False . ADD_CSP_HEADER (boolean) : Default: False . CSP_HEADER (string) : Default: default-src 'self'; . MODEL_CONFIG_EXTRA (string) : Must be one of: ['allow', 'forbid', 'ignore'] . Default: forbid . RESET_TEST_DB (boolean) : Completely clear the db at startup. Only works in test env. Default: False . DEFAULT_LANGUAGE_FE_MESSAGES_FILE (string) : A i18n source file that is generally stored in the frontend development repo (works only in dev mode).","title":"Settings"},{"location":"schema/Settings/#settings","text":"Base class for settings, allowing values to be overridden by environment variables. This is useful in production for secrets you do not wish to save in code, it plays nicely with docker(-compose), Heroku and any 12 factor app design.","title":"Settings"},{"location":"schema/Settings/#properties","text":"ENV (string) : Must be one of: ['dev', 'prod', 'test'] . HOST (string) : Host address(including port) of the frontend app. Default: http://0.0.0.0 . PORT (integer) : Port of the server. Default: 8100 . POSTGRES_HOST (string) : hostname of the postgres (e.g. localhost). POSTGRES_USER (string) : username for postgres. POSTGRES_PASSWORD (string) : password to the postgres database. POSTGRES_DB (string) : name of the database. FIRST_ADMIN_EMAIL (string) : email address of the 1. admin user. FIRST_ADMIN_PASSWORD (string) : Password for the 1. admin user. EMAIL_ENABLED (boolean) : Set if emails should be sent. Default: False . EMAIL_SENDER (string) : (REQUIRED, when EMAIL_ENABLED): Name of the sender, including the server. EMAIL_ACCOUNT (string) : (REQUIRED, when EMAIL_ENABLED): Email address of the sender. EMAIL_PWD (string) : (REQUIRED, when EMAIL_ENABLED): Password of the email account. Default: ``. EMAIL_SSL_SERVER (string) : (REQUIRED, when EMAIL_ENABLED): smtp-server of email account. Default: ``. SESSION_SECRET (string) : A generic secret to be used for session encryption. MAP_DEFAULT_MAP_STYLE (string) : Default mapbox map style to render maps. This is the default style to use. More info: mapbox.com/. MAP_ACCESS_TOKEN (string) : Mapbox access token. ADDITIONAL_MAP_STYLES (array) : Additional map styles (experimental). Default: [] . Items (string) PLATFORM_TITLE (string) : The title of the platform. Visible on the appbar, when no-domain. Default: Oblo . BASE_ROUTER_PREFIX (string) : Api endpoint base router prefix. Default: /api . APP_DIR (string) : The directory where the frontend-app is located, relatively to the app path (default: fe). Default: fe . APP_ROUTE (string) : application path the frontend app is hooked to. Default: / . BASE_DATA_FOLDER (string) : Base data folder, where application files (not static files) are stored. Default: data . INIT_DOMAINS_SUBPATH (string) : Sub-path to the folder where the initial domains are stored, within BASE_DATA_FOLDER/init_files/. Default: domains . LANGUAGE_SQLITE_FILE_PATH (string) : path of the messages.sqlite database. Default: messages.sqlite . DEFAULT_LANGUAGE (string) : configured application default language. Default: en . INIT_DOMAINS (boolean) : Configuration, if domains should be re-initialized during startup. Default: True . INIT_TEMPLATES_CODES (boolean) : Configuration, if templates and code entries should be re-initialized during startup. Default: True . INIT_LANGUAGE_TABLES (boolean) : Configuration, if language tables should be re-initialized during startup. Default: True . REPLACE_MESSAGES (boolean) : Configuration, if messages during re-initialization should be overwritten by text in csv files. Default: False . DEACTIVATE_LANGUAGES (array) : languages that should be deactivated. Default: [] . Items (string) LOGIN_REQUIRED (boolean) : Configuration, if login is required for all routes (experimental). Default: False . EMAIL_VERIFICATION_REQUIRED (boolean) : Configuration, if email verification is required after registration. Default: True . DEFAULT_USER_GUIDE_URL (string) : URL to the user guides. TIMING_MIDDLEWARE_ACTIVE (boolean) : Configuration, if timing middleware should be active. Default: False . DATA_MIGRATION (boolean) : Configuration, if data migration should be performed after setup. Default: False . RUN_APP_TESTS (boolean) : Configuration, if app tests should be run after setup. Default: False . LANGUAGE_LIST_SOURCE_REPO_URL (string) : Repo from which language names are taken (downloaded at the first startup). Default: https://github.com/umpirsky/language-list . CORS_OTHER_ORIGINS (string) : Default: ``. MIGRATION_HELP_ACTIVE (boolean) : change some config helping and adaptations to the init code for migration. Default: False . ADD_CSP_HEADER (boolean) : Default: False . CSP_HEADER (string) : Default: default-src 'self'; . MODEL_CONFIG_EXTRA (string) : Must be one of: ['allow', 'forbid', 'ignore'] . Default: forbid . RESET_TEST_DB (boolean) : Completely clear the db at startup. Only works in test env. Default: False . DEFAULT_LANGUAGE_FE_MESSAGES_FILE (string) : A i18n source file that is generally stored in the frontend development repo (works only in dev mode).","title":"Properties"}]}